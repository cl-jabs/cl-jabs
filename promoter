#!/bin/sh

#### Prepare and Setup

## colors
if which tput > /dev/null 2>&1 && [ $(tput -T$TERM colors 2>/dev/null || echo 0) -ge 8 ]; then
    ## action: PURPLE, name: CYAN, passed: BLUE, failed: RED, step done GREEN
    GRAY="\[\033[1;30m\]"
    BLUE="\033[0;34m"
    CYAN="\033[0;36m"
    PURPLE="\033[0;35m"
    GREEN="\033[0;32m"
    RED="\033[0;31m"
    YELLOW="\033[0;33m"
    WHITE="\033[0;37m"
    NO_COLOUR="\033[0m"
fi
## /colors

## set variables

LIBS="asdf"
# LIBS=""
SBCL_URI="http://downloads.sourceforge.net/project/sbcl/sbcl/1.3.4/sbcl-1.3.4-x86-64-linux-binary.tar.bz2?r=http%3A%2F%2Fwww.sbcl.org%2Fplatform-table.html&ts=1461060178&use_mirror=tenet"
# [ -z ${SBCL_FORCE_LOCAL} ] && SBCL_FORCE_LOCAL=""
CCL_URL=

BASE_DIR=$(dirname $(readlink -n -f $0))
TARGET_DIR="${BASE_DIR}/target"
TARGET_BIN="${TARGET_DIR}/bin"
ARGV=$@

[ ! -z "$TARGET_BIN" ] && export PATH=$PATH:${TARGET_BIN}
[ -z "$JABS_VERSION" ] && JABS_VERSION="`git rev-parse --short HEAD`-SNAPSHOT"

export SBCL_BIN=$(which sbcl)
if [ -d "/usr/lib/sbcl" ]; then
    export SBCL_LIBDIR=/usr/lib/sbcl
else
    export SBCL_LIBDIR=${TARGET_DIR}
fi

export CCL_BIN=$(which ccl)
export PATH=$PATH:${BASE_DIR}/bin:${TARGET_BIN} ## add to path directory with local binaries

get_argv_argument ()
{
    argument=`echo $1 | sed 's/\-/\\\-/g'`
    echo $ARGV | grep -oE "${argument}=[a-z,A-Z,0-9,/,:]*" | cut -d'=' -f2 | tr '\n' '/'
}

export I_PREFIX=`get_argv_argument --prefix`
[ -z ${I_PREFIX} ] && export I_PREFIX=/usr/local/

export I_BINDIR=`get_argv_argument --bindir`
[ -Z ${I_BINDIR} ] && export I_BINDIR=${I_PREFIX}bin/

export I_DATAROOTDIR=`get_argv_argument --sharedir`
[ -z ${I_DATAROOTDIR} ] && export I_DATAROOTDIR=${I_PREFIX}share/jabs/

export I_SRCDIR=`get_argv_argument --srcdir`
[ -z ${I_SRCDIR} ] && export I_SRCDIR=${I_DATAROOTDIR}src/

export I_LIBDIR=`get_argv_argument --libdir`
[ -z ${I_LIBDIR} ] && export I_LIBDIR=${I_PREFIX}lib/jabs/

export I_SYSCONFIGDIR=`get_argv_argument --sysconfigdir`
[ -z ${I_SYSCONFIGDIR} ] && export I_SYSCONFIGDIR=${I_PREFIX}etc/jabs/

## /set variables

## functions

print_help()
{
    local version="$(grep -R 'defconstant +jabs-version+' src/jabs-core.lisp 2>/dev/null | cut -d \" -f2 2>/dev/null)"
    [ -z ${version} ] && version=$JABS_VERSION
    echo "${PURPLE}This is a \`\`${YELLOW}promoter${NO_COLOUR}\`\` ${PURPLE}script for ${CYAN}(${RED}J${NO_COLOUR}ust ${CYAN}(${RED}A${NO_COLOUR}nother ${CYAN}(${RED}B${NO_COLOUR}uild ${CYAN}(${RED}S${NO_COLOUR}ystem${CYAN}))))${NO_COLOUR}"
    echo "${PURPLE}JABS version: ${CYAN}$version${NO_COLOUR}"
    echo "${PURPLE}Usage:\n       ${CYAN}$0${NO_COLOUR} ${GREEN}[prepare|build|build-local|test [-l|<test_module_name>]|clean]${NO_COLOUR}"
    echo
    echo "       -l                 : list of test modules (only for \`\`test\`\` action)"
    echo "       <test_module_name> : run only selected unit test (only for \`\`test\`\` action, see \`\`-l\`\`)"
    echo "${PURPLE}Default action (${WHITE}without arguments${PURPLE}) is ${GREEN}\`\`help\`\`${NO_COLOUR}"
    echo

}

check_sbcl()
{
    echo -n "${PURPLE}Checking${NO_COLOUR} for ${CYAN}sbcl${NO_COLOUR} binary present in system... "
    test -z $SBCL_BIN && echo "${CYAN}sbcl${NO_COLOUR} binary not found in system" && return 5
    test -z "$SBCL" && export SBCL="$SBCL_BIN --disable-debugger --no-sysinit --no-userinit"
    echo "${PURPLE}DONE${NO_COLOUR}"
}

do_sbcl()
{
    echo -n "${PURPLE}Installing${NO_COLOUR} ${CYAN}sbcl${NO_COLOUR} locally to ${TARGET_DIR}... "
    mkdir -p ${TARGET_DIR} ${TARGET_BIN}
    [ ! $? -eq 0 ] && echo "Can not make ${TARGET_BIN} and/or ${TARGET_DIR} directories. Exiting" && return 1
    cd ${TARGET_DIR}
    wget -q $SBCL_URI -O sbcl.tar.gz
    tar -xf sbcl.tar.gz
    ln -sf ${TARGET_DIR}/sbcl-*/run-sbcl.sh ${TARGET_BIN}/sbcl
    cd $BASE_DIR
    export PATH=$PATH:${TARGET_BIN}
    export SBCL_BIN=$(which sbcl)
    check_sbcl >/dev/null
    echo "${PURPLE}DONE${NO_COLOUR}"
}

do_unittest()
{
    local name=$(basename ${1} .lisp)
    echo "${PURPLE}Running${NO_COLOUR} test module ${CYAN}${name}${NO_COLOUR}..."
    RES=`$SBCL --eval "(require 'asdf)" --script test/unit/$1`
    echo "$RES"

    if [ $(echo "$RES" | grep -cE '^not ok [0-9]') != 0 ] ; then
        echo "Test module ${CYAN}${name} ${RED}FAILED${NO_COLOUR}"
        return 1
    fi
    echo "Test module ${CYAN}${name} ${BLUE}PASSED${NO_COLOUR}"
}


do_install()
{
    ## Build jabs with correct pathnames
    do_generate $I_BINDIR $I_SRCDIR $I_SYSCONFIGDIR $I_DATAROOTDIR $I_LIBDIR
    ## making destination direcotories
    mkdir -p $I_BINDIR $I_SRCDIR $I_SYSCONFIGDIR $I_DATAROOTDIR $I_LIBDIR

    ## copying files to destination direcotories
    # sources
    for i in `find src/ -type f -name '*.lisp'`; do
        dst=$I_SRCDIR/`dirname $i | sed 's/^src//g'`
        mkdir -p $dst
        cp $i $dst
    done
    # sysconfig
    cp etc/* $I_SYSCONFIGDIR
    # shared files
    for i in `find share/bouts/ -type f | grep -vE 'README|TODO'`; do
        dst=$I_DATAROOTDIR/`dirname $i | sed 's/^share//g'`
        mkdir -p $dst
        cp $i $dst
    done
    for i in `find share/rounds/ -type f | grep -vE 'README|TODO'`; do
        dst=$I_DATAROOTDIR/`dirname $i | sed 's/^share//g'`
        mkdir -p $dst
        cp $i $dst
    done
    for i in `find share/hits/ -type f | grep -vE 'README|TODO'`; do
        dst=$I_DATAROOTDIR/`dirname $i | sed 's/^share//g'`
        mkdir -p $dst
        cp $i $dst
    done
        for i in `find share/skeletons/ -type f | grep -vE 'README|TODO'`; do
        dst=$I_DATAROOTDIR/`dirname $i | sed 's/^share//g'`
        mkdir -p $dst
        cp $i $dst
    done
    for i in `find share/plugins/ -type f | grep -vE 'README|TODO'`; do
        dst=$I_DATAROOTDIR/`dirname $i | sed 's/^share//g'`
        mkdir -p $dst
        cp $i $dst
    done
    # binary
    if [ ! -f bin/jab ] || [ ! -f bin/jn.sh ]; then
        do_build_wrappers
    fi
    cp bin/* $I_BINDIR
}

do_clean()
{
    cd $BASE_DIR

    echo -n "${PURPLE}Clearing${NO_COLOUR} wrappers... "
    rm -f bin/jab bin/jn.sh
    echo "${PURPLE}DONE${NO_COLOUR}"

    echo -n "${PURPLE}Clearing${NO_COLOUR} autogenerated files... "
    for i in `find . -type f -name '*.lisp.input'`; do
        rm -rf $(dirname ${i})/$(basename ${i} .input)
    done
    echo "${PURPLE}DONE${NO_COLOUR}"

    echo -n "${PURPLE}Clearing${NO_COLOUR} temporary directories... "
    [ -n  ${TARGET_BIN} ] && rm -rf ${TARGET_BIN}
    [ -n  ${TARGET_DIR} ] && rm -rf ${TARGET_DIR}
    echo "${PURPLE}DONE${NO_COLOUR}"

    echo -n "${PURPLE}Clearing${NO_COLOUR} backup files... "
    rm -f `find . -name '*~'`
    echo "${PURPLE}DONE${NO_COLOUR}"
    ## resetting modules state (could change state during build)
    echo -n "${PURPLE}Clearing${NO_COLOUR} git submodules state... "
    rm -rf lib/*
    git submodule update --init --recursive>/dev/null 2>/dev/null
    echo "${PURPLE}DONE${NO_COLOUR}"
}


do_generate() # $PWD/bin/ $PWD/src/ $PWD/etc/ $PWD/share/ $PWD/lib/
{
    bindir=$1 # $PWD/bin/
    srcdir=$2 # $PWD/src/
    sysconfigdir=$3 # $PWD/etc/
    datarootdir=$4 # $PWD/share/
    libdir=$5 # $PWD/lib/

    echo -n "${PURPLE}Generating${NO_COLOUR} files from templates... "

    # SRCDIR BINDIR SBCL_BIN DATADIR LIBDIR DATAROOTDIR SYSCONFDIR

    sed "s|@SRCDIR@|$srcdir|" src/wrappers/jn/jn.sh.input > $PWD/bin/jn.sh && chmod a+x $PWD/bin/jn.sh
    sed "s|@BINDIR@|$bindir|;s|@SRCDIR@|$srcdir|" src/wrappers/jab/make-jab.lisp.input > src/wrappers/jab/make-jab.lisp
    sed "s|@SRCDIR@|$srcdir|;s|@SBCL_BIN@|$SBCL_BIN|" src/wrappers/jab/jab.lisp.input > src/wrappers/jab/jab.lisp
    sed "s|@SRCDIR@|$srcdir|" src/jabs-loader.lisp.input > src/jabs-loader.lisp
    sed "s|@SRCDIR@|$srcdir|;s|@LIBDIR@|$libdir|;s|@DATAROOTDIR@|$datarootdir|;s|@SYSCONFIGDIR@|$sysconfigdir|;s|@JABS_VERSION@|$JABS_VERSION|;s|@SBCL_LIBDIR@|$SBCL_LIBDIR|" src/jabs-core.lisp.input > src/jabs-core.lisp

    echo "${PURPLE}DONE${NO_COLOUR}"
}

do_build_wrappers ()
{
    echo -n "${PURPLE}Building${NO_COLOUR} wrappers... "
    $SBCL --load ./src/wrappers/jab/make-jab.lisp >/dev/null
    ret=$?
    [ $ret != 0 ] && echo "${PURPLE}Build${NO_COLOUR} ${RED}FAILED${NO_COLOUR}">&2 && exit $ret
    echo "${PURPLE}DONE${NO_COLOUR}"
}

do_build()
{
    ## Check if system prepared to build
    [ -z "$(which git)" ] && echo "There is ${RED}no ${CYAN}git${NO_COLOUR} executable. Can not continue!${NO_COLOUR}" && return 1
    [ ! -d .git ] && echo "${RED}Not in git repository. Can not continue!${NO_COLOUR}" && return 1

    echo -n "${PURPLE}Updating${NO_COLOUR} git submodules... "
    git submodule update --init --recursive >/dev/null
    echo "${PURPLE}DONE${NO_COLOUR}"

    ## preparing ASDF to use new texinfo
    echo -n "${PURPLE}Preparing${NO_COLOUR} ASDF to use new texinfo... "
    sed -i 's/\&rest/Arest/g;s/\&key/Akey/g;s/\&optional/Aoptional/g;s/\&allow-other-keys/Aallow-other-keys/g;s/\&body/Abody/g' lib/asdf/doc/asdf.texinfo
    echo "${PURPLE}DONE${NO_COLOUR}"


    if [ -n "$LIBS" ]; then
        echo -n "${PURPLE}Building${NO_COLOUR} extensions... "
        for i in "$LIBS"; do
            cd lib/$i
            make >/dev/null
            local ret=$?
            cd $BASE_DIR
            [ $ret != 0 ] && echo "${PURPLE}Build${NO_COLOUR} library ${CYAN}$i ${RED}FAILED${NO_COLOUR}">&2 && return $ret
        done
        echo "${PURPLE}DONE${NO_COLOUR}"
    fi

    echo -n "${PURPLE}Copying${NO_COLOUR} extension files to JABS directories... "
    if [ -f lib/asdf/build/asdf.lisp ]; then
        cp lib/asdf/build/asdf.lisp src/core/jabs-asdf/
    else
        echo "${PURPLE}Build${NO_COLOUR} ASDF library ${RED}FAILED${NO_COLOUR}. There is no file ${CYAN}lib/asdf/build/asdf.lisp${NO_COLOUR}">&2
        return 1
    fi

    if [ -f lib/quicklisp-bootstrap/quicklisp.lisp ]; then
        cp lib/quicklisp-bootstrap/quicklisp.lisp share/plugins/repository/quicklisp/quicklisp.lisp
    else
        echo "${PURPLE}Build${NO_COLOUR} Quicklisp bootstrap library ${RED}FAILED${NO_COLOUR}. There is no file ${CYAN}share/plugins/repository/quicklisp/${NO_COLOUR}">&2
        return 1
    fi
    echo "${PURPLE}DONE${NO_COLOUR}"

    if [ ! -z "$*" ]; then
        do_generate $@
    else
        do_generate $PWD/bin/ $PWD/src/ $PWD/etc/ $PWD/share/ $PWD/lib/
    fi
    do_build_wrappers
    # echo
    # echo "You can operate now with ${CYAN}\`\`jab''${NO_COLOUR} utility from local directory, or do ${CYAN}\`\`./jab --self-install''${NO_COLOUR} to install it globally"
    # echo
    # echo -n "${PURPLE}Generating${NO_COLOUR} documentation..."
    # echo "# JABS Tools" > doc/Tools.md
    # grep -E '\(defun|\(defmacro|\(defvar' src/jabs-tools.lisp | grep -vE '^;' | sed 's|(defvar|var|g;s|(defmacro|macro|g;s|(defun|fun|g' | while read i; do printf "* \`$i\`\n\n"; done >> doc/Tools.md
    # echo "${PURPLE}DONE${NO_COLOUR}"
}

print_step()
{
    echo ">> ${PURPLE}$@${NO_COLOUR}"
}

print_step_done()
{
    echo ">> ${PURPLE}DONE${NO_COLOUR} step"
    echo
}

print_step_fail()
{
    echo ">> ${RED}FAILED${NO_COLOUR} step"
    echo
}

case $1 in
    "clean")
        print_step Clearing
        do_clean
        print_step_done
        ;;
    "test")
        ## list of test modules
        if [ x$2 = "x-l" ]; then
            for k in `ls test/unit/*-test.lisp`; do
                echo $(basename $k .lisp)
            done
            exit 0
        fi

	print_step Clearing
	do_clean
	print_step_done

	print_step Preparing ${NO_COLOUR} environment to test
        ## check for sbcl binary
	if [ -z $SBCL_FORCE_LOCAL ]; then check_sbcl || do_sbcl; else do_sbcl; fi
	print_step_done

        ## building
        print_step "Running ${CYAN}build${NO_COLOUR} test"
        do_build
        [ $? != 0 ] && echo ">> ${RED}FAILED${NO_COLOUR} step">&2 && exit 1
        print_step_done

        if [ ! -z $2 ]; then
            do_unittest ${2}.lisp
            exit $?
        else
            ## unit tests
	    failed_unit_tests=no
            print_step "${PURPLE}Running ${CYAN}unit ${NO_COLOUR}tests"
            for i in $(ls test/unit/*-test.lisp 2>/dev/null); do
		echo -n "${PURPLE}Running${NO_COLOUR} test module ${CYAN}$(basename $i .lisp)${NO_COLOUR}... "
                do_unittest $(basename $i) | grep -E 'ok [0-9]' | grep -vE '^ok' | grep -c 'not ok' >/dev/null
                if [ $? = 0 ]; then
		    echo "${RED}FAILED${NO_COLOUR}"
		    failed_unit_tests=yes
		else
		    echo "${BLUE}PASSED${NO_COLOUR}"
		fi
            done
	    if [ $failed_unit_tests = "yes" ]; then
		print_step_fail # && exit 1 ## do not fail if unit tests failed now
	    else
		print_step_done
	    fi

	    ## integration tests
            failed_integration_tests=no
	    print_step "${PURPLE}Running ${CYAN}integration${NO_COLOUR} tests"
            for i in `ls $BASE_DIR/test/*.sh`; do
		echo -n "${PURPLE}Running${NO_COLOUR} test module ${CYAN}$(basename $i .sh)${NO_COLOUR}... "
	        RES=`/bin/bash ${i} >/dev/null 2>&1`
	        if [ "$?" = 0 ]; then
		    echo "${BLUE}PASSED${NO_COLOUR}"
	        else
                    echo "$RES"
		    echo "${RED}FAILED${NO_COLOUR}"
                    failed_integration_tests=yes
	        fi
            done
            if [ $failed_integration_tests = "yes" ]; then
		print_step_fail # && exit 1 ## do not fail if unit tests failed now
	    else
                print_step_done
	    fi

            # ## install process
            # echo ">> ${PURPLE}Testing ${CYAN}installation process${NO_COLOUR}"
            # DSTDIR=`mktemp -d /tmp/.jabs.XXXXXX`
            # do_install $DSTDIR
            # ## testing if installation completed
            # J_PREFIX=$DSTDIR
            # J_BINDIR=$DSTDIR/bin
            # J_LIBDIR=$DSTDIR/lib
            # J_SYSCONFDIR=$DSTDIR/etc/
            # J_DATAROOTDIR=$DSTDIR/share
            # if [ -x $J_BINDIR/jab ] && \
            #        [ -f $J_SYSCONFDIR/jabs/alias.conf ] && [ -f $J_SYSCONFDIR/jabs/jabs.conf ] && \
            #        [ -f $J_LIBDIR/jabs/asdf/asdf.lisp ] && \
            #        [ -f $J_DATAROOTDIR/jabs/src/jabs-loader.lisp ]; then
            #     echo "${CYAN}Installation process ${BLUE}PASSED${NO_COLOUR}"
            # else
            #     echo "${RED}Installation incomplete. Install process failed${NO_COLOUR}">&2
            #     exit 1
            # fi
            # echo ">> ${PURPLE}DONE${NO_COLOUR} step"
            # echo ">> ${PURPLE}Testing ${CYAN} functionality${NO_COLOUR}"
            # mkdir -p $J_PREFIX/workdir
            # cd $J_PREFIX/workdir
            # mkdir src
            # touch src/test.lisp
            # $J_BINDIR/jab --generate-buildfile -q > /dev/null
            # [ $? != 0 ] && echo ">> ${RED}FAILED${NO_COLOUR} step">&2 && exit 1
            # $J_BINDIR/jab -q && [ -d "doc" ] && [ -d "test" ]
            # [ $? != 0 ] && echo ">> ${RED}FAILED${NO_COLOUR} step">&2 && exit 1
            # echo ">> ${PURPLE}DONE${NO_COLOUR} step"
            # echo
            print_step "${PURPLE}Clearing${NO_COLOUR}"
            # rm -rf $DSTDIR
            do_clean # >/dev/null
            [ $? != 0 ] && exit 1
            print_step_done
        fi
        ;;
    "install")
        shift
	if [ -z $SBCL_FORCE_LOCAL ]; then check_sbcl || do_sbcl; else do_sbcl; fi
        ret=$?
        [ $ret != 0 ] && echo ">> ${RED}FAILED${NO_COLOUR} step">&2 && exit $ret
        print_step_done

        # print_step "${PURPLE}Building${NO_COLOUR} JABS"
        # do_build
        # print_step_done

        print_step "${PURPLE}Installing${NO_COLOUR} JABS"
        do_install $@
        [ $? != 0 ] && print_step_fail && do_clean && exit 1
        print_step_done
        ;;
    "prepare")
	if [ -z $SBCL_FORCE_LOCAL ]; then check_sbcl || do_sbcl; else do_sbcl; fi
	;;
    "build-local")
	if [ -z $SBCL_FORCE_LOCAL ]; then check_sbcl || do_sbcl; else do_sbcl; fi
        ret=$?
        [ $ret != 0 ] && print_step_fail && exit $ret
        print_step_done
        print_step "${PURPLE}Building${NO_COLOUR} JABS to run locally"
        do_build
        print_step_done
        ;;
    "build")
	if [ -z $SBCL_FORCE_LOCAL ]; then check_sbcl || do_sbcl; else do_sbcl; fi
        ret=$?
        [ $ret != 0 ] && print_step_fail && exit $ret
        print_step_done
        print_step "${PURPLE}Building${NO_COLOUR} JABS"
        do_build $I_BINDIR $I_SRCDIR $I_SYSCONFIGDIR $I_DATAROOTDIR $I_LIBDIR
        print_step_done
        ;;
    *)
        print_help
        ;;
esac
