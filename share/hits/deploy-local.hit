;; -*- mode: lisp -*-
(deploy-local :depends-on ()
	      (let* ((current-skeleton (or (try (find-skeleton (car (project-slot-value *jabs-current-project* 'skeleton))))
					   (try (find-skeleton (project-slot-value *jabs-current-project* 'skeleton)))))
		     (target-dir (when current-skeleton (pathname-as-directory (parse-namestring (get-skeleton-target current-skeleton)))))
		     ;;
		     (src-dir (try (get-skeleton-src current-skeleton)))
		     (bin-dir (try (get-skeleton-bin current-skeleton)))
		     (doc-dir (try (get-skeleton-doc current-skeleton)))
		     (share-dir (try (get-skeleton-share current-skeleton)))
		     (test-dir (try (get-skeleton-test current-skeleton)))
		     (contrib-dir (try (get-skeleton-contrib current-skeleton)))
		     (conf-dir (try (get-skeleton-conf current-skeleton)))
		     (script-dir (try (get-skeleton-script current-skeleton)))
		     (readme-file (try (get-skeleton-readme-file current-skeleton)))
		     (license-file (try (get-skeleton-license-file current-skeleton)))
		     (install-file (try (get-skeleton-install-file current-skeleton)))
		     ;;
		     )
		(when (not target-dir)
		  (jlog:crit "Target directory for skeleton ``~a'', project ``~a'' is not set. Can not deploy locally"
			     (get-skeleton-name current-skeleton)
			     (get-project-name *jabs-current-project*)))
		;;
		(dolist (dir (list src-dir bin-dir doc-dir test-dir contrib-dir script-dir share-dir conf-dir))
		  (let ((dst-dir (when dir (pathname-as-directory (or (try (parse-namestring dir))
								      (try (parse-namestring (car dir))))))))
		    (when dst-dir
		      (os-cp dst-dir (merge-pathnames dst-dir target-dir) :recursive t :force t))))
		(dolist (file (list readme-file license-file install-file))
		  (when (and file (file-exists-p file))
		    (os-cp file (merge-pathnames file target-dir) :recursive t :force t)))))
