;;; -*- Mode: Lisp -*-
#|
MIT License

Copyright (c) 2017 Alexander Vynnyk <cosmonaut.ok@zoho.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
|#
(in-package :jabs)

#+sbcl(require 'sb-posix)

;; define jabs version
(defconstant +jabs-version+ "@JABS_VERSION@")

(defconstant +jabs-run-directory+ (os-pwd))

;; local direcotry names:
(defvar *jabs-local-share-directory* (make-pathname :directory '(:relative "share")))
(defvar *jabs-local-config-directory* (make-pathname :directory '(:relative "etc")))
(defvar *jabs-local-lib-directory* (make-pathname :directory '(:relative "lib")))
(defvar *jabs-local-src-directory* (make-pathname :directory '(:relative "src")))
(defvar *jabs-local-directory* (make-pathname :directory '(:relative ".jabs")))

;; system directories
(defvar *jabs-source-directory* (parse-namestring "@SRCDIR@"))
(defvar *jabs-lib-directory* (parse-namestring "@LIBDIR@"))
(defvar *jabs-share-directory* (parse-namestring "@DATAROOTDIR@"))
(defvar *jabs-config-directory* (parse-namestring "@SYSCONFIGDIR@"))
(defvar *jabs-user-directory* (merge-pathnames
                               (make-pathname :directory
                                              '(:relative ".jabs"))
                               (user-homedir-pathname)))

(defvar *jabs-buildfile* (make-pathname :name "build" :type "jab"))

(defconstant +jabs-configfile+ (make-pathname :name "jabs" :type "conf"))

(defvar *jabs-output-log* nil)
(defvar *jabs-error-log* nil)

(defvar *jabs-universal-delimiter* "@")

;; ;; hooks
(defvar *post-init-hook* nil
  "Run some functions without arguments after JABS initialization")

(defvar *fail-on-error* nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmacro run-hook (hook &body args)
  "Run hook with arguments"
  `(when ,hook
     (jlog:dbg "Running ``~a'' hook" ,(symbol-name hook))
     (dolist (run (reverse ,hook))
       (funcall run ,@args))))

(defmacro add-hook (hook &body body)
  "Add lambda or function symbol to hook variable"
  `(push ,@body ,hook))

(defun load-build-jab (dir)
  "loading build file" ;; TODO: move to jabs-loader as part of loading (not used at other places)
  (let ((dirname (pathname-as-directory dir)))
    (if (probe-file (merge-pathnames dirname *jabs-buildfile*))
        (progn
          (jlog:dbg "Loading buildfile ``~a'' in ``~a''" *jabs-buildfile* dirname)
          ;; (os-cd dirname) ;; TODO: is it needed??
          (load (merge-pathnames dirname *jabs-buildfile*))))))

(defun get-option-suffix (name list &key (test 'eql) (nth 1))
  (nth nth (member name list :test test)))

(defun remove-with-arg (item list) ;; &key (test 'eql))
  (cond ((null list) nil)
        ((equal item (car list)) ;; TODO: make it with #'test
         (remove-with-arg item (cddr list)))
        (t (cons (car list) (remove-with-arg item (cdr list))))))

(defmacro with-project-to-be-run (project &body body)
  "Run code only if project is set to be run"
  `(when (and (typep ,project 'jabs::project)
              (eq (tokeyword (get-project-name ,project))
                             *jabs-project-to-run*))
     ,@body))

;; ;; read configfile TODO: make it later ;)
;; (dolist (v (os-cat (merge-pathnames +jabs-configfile+ *jabs-config-directory*) :list))
;;   (when (not (null (cadr v)))
;;     (eval `(setf ,(tosymbol (car v) :jabs) ,(cadr v)))))

;; setting version
(push (intern (concatenate 'string "JABS" +jabs-version+) :keyword) *features*)
